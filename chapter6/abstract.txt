设立一些为各成员所遵守的界限始终是很重要的。
当你创建一个类库，也就与使用该类库的用户建立的某种关系，这些用户就是客户端程序员。
客户端程序员将你的类库聚合成为一个应用程序，或是运用你的类库来创建一个更大的类库。
如果不指定规则，那么客户端程序员就可以随心而为，在这种情况下所有都是公开的。

本章讨论了类是如何被构建成类库的：
首先， 介绍一组类是如何打包到一个类库中；
6.1 包 库单元
package + import 解决了类名重复的冲突问题。将单一的全局名字空间分割开。
代码组织： java 源代码(编译单元.java) -- 输出文件.class -- java 可运行程序/ 类库 （jar）
创建unique包名：域名 + 目录名；定制工具库；用import改变行为

其次， 类是如何控制对其成员的访问的。
private -- default -- protected -- public

访问权限的控制 是为了具体实现的隐藏，即接口和具体实现进行分离。
原因：
1. 用户不要碰触他们不该碰触的部分，这些部分对于类内部操作是必要的，但是它不属于客户端接口部分，因此private;
2. 为了让类库设计者，可以更改类的内部工作方式，而不必担心会对client产生重大影响。