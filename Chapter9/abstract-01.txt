这一章讲接口。这里的接口不是指Java的interface语法，而是指一种抽象出来的编程思想。
正如在前面几章中看到的那样——面向基类编程。我们定义一个通用的协议，它的实现类把协议中规定的功能完成，调用的时候利用多态的动态绑定，就可以发送同样的消息完成不同的功能。而这种思想在Java中通过两种方式实现（cite http://github.thinkingbar.com/thinking_in_java_chapter09/）：
抽象类 and 接口
   
接口：
1.	interface 内的所有函数都是public的，接口内的域成员都是static 和 final的。
	并且编译器不允许非public函数的存在。
2.  使用接口的核心原因：
	1. 为了能够向上转型为多个基类（以及由此而带来更多灵活性）。
	2. 与抽象基类相同，防止客户端程序员创建该类的对象，并确保这仅仅是一个接口。
3.	可以继承不同的接口来组合新的接口，但是接口组合的过程中，会出现覆盖，实现和重载会搅合在一起。
	重载方法仅通过返回类型无法区分，所以应该尽量避免组合的接口之间使用相同的方法名，造成混乱。
4.  Java允许对接口的多重继承。
5， 不能用任何方法的实现。

抽象类：
1.	可以有非抽象方法的实现。
2.	创建抽象类的好处：
	可以使类的抽象性明确起来，并告诉用户和编译器打算怎么使用它们。
	抽象类还是重要的重构工具，因为它们使我们可以很容易地将公共方法沿着继承层次结构向上移动。

该用抽象类 还是 接口？
	如果要创建不带任何方法定义和成员变量的基类，那么就应该选择接口而不是抽象类。
	事实上，如果知道某事物应该成为一个基类，那么第一选择应该是使它成为一个接口。

关于多重继承：
	前面讲过了抽象、继承、多态，但我们知道,Java是单继承，比如一个A类想同时继承B类和C类是无法完成的。而在很多情况下，多继承是必不可少的。Java是参考C++开发出来的编程语言，那么这一点为什么没有按照C++的方式来做呢？
    作者在书中写到，C++的多继承容易产生逻辑混乱的代码。尤其是遇到菱形继承，一个类可能有多个父类，而多个父类又可以有多个父类，以此类推下去。整个继承机构将会变得非常复杂。这时候利用多态就非常容易出错。所以Java为了避免这种情况，就用了单继承+接口的形式替代多继承的功能。


	